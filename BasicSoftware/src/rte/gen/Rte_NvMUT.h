/** @file     Rte_NvMUT.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 7.5.3
  */

#ifndef RTE_NVMUT_H
#define RTE_NVMUT_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_NvMUT_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_RE_CyclicBlock_JobFinished)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#elif defined(RTE_RUNNABLEAPI_RE_ImmdiateBlock_JobFinished)
#elif defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
#elif defined(RTE_RUNNABLEAPI_RE_NvMUT_FastWrite_10ms)
#elif defined(RTE_RUNNABLEAPI_RE_ShutdownBlock_JobFinished)
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/


/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_NvMUT {
   uint8 Rte_Dummy;
};
typedef struct Rte_CDS_NvMUT Rte_CDS_NvMUT;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_EcucPartition_SysCore_CONST_UNSPECIFIED
#include "Rte_MemMap.h"
extern CONST(struct Rte_CDS_NvMUT, RTE_CONST) Rte_Inst_NvMUT;
#define RTE_STOP_SEC_EcucPartition_SysCore_CONST_UNSPECIFIED
#include "Rte_MemMap.h"


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_NvMUT, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#define ExeMgrUT_START_SEC_CODE
#include "ExeMgrUT_MemMap.h"
FUNC(void, ExeMgrUT_CODE) RE_ExeMgr_ExecuteReset(VAR(EcuM_ShutdownCauseType, AUTOMATIC) resetReason,
                                                 VAR(EcuM_ShutdownModeType, AUTOMATIC) resetGroup);

FUNC(void, ExeMgrUT_CODE) RE_ExeMgr_ResetInfo(P2VAR(EcuM_ShutdownCauseType, AUTOMATIC, RTE_APPL_DATA) resetReason,
                                              P2VAR(EcuM_ShutdownModeType, AUTOMATIC, RTE_APPL_DATA) resetGroup);

#define ExeMgrUT_STOP_SEC_CODE
#include "ExeMgrUT_MemMap.h"
#define RTE_START_SEC_EcucPartition_SysCore_CONST_UNSPECIFIED
#include "Rte_MemMap.h"
extern CONST(Rte_SelfType_ExeMgrUT, RTE_CONST) Rte_Self_CPT_ExeMgrUT;
#define RTE_STOP_SEC_EcucPartition_SysCore_CONST_UNSPECIFIED
#include "Rte_MemMap.h"
#define RTE_NVMUT_START_SEC_CODE
#include "Rte_MemMap.h"
FUNC(Std_ReturnType, RTE_CODE) Rte_Read_NvMUT_PRP_CyclicNvBlock_CyclicNvBlock(P2VAR(Type_U8, AUTOMATIC, RTE_APPL_DATA) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Read_NvMUT_PRP_ImmediateNvBlock_ImmediateNvBlock(P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Read_NvMUT_PRP_ShutdownNvBlock_ShutDownNvBlock(P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_NvMUT_PRP_CyclicNvBlock_CyclicNvBlock(P2CONST(Type_U8, AUTOMATIC, RTE_APPL_DATA) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_NvMUT_PRP_ImmediateNvBlock_ImmediateNvBlock(P2CONST(uint32, AUTOMATIC, RTE_APPL_DATA) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_NvMUT_PRP_ShutdownNvBlock_ShutDownNvBlock(P2CONST(boolean, AUTOMATIC, RTE_APPL_DATA) data);
#define RTE_NVMUT_STOP_SEC_CODE
#include "Rte_MemMap.h"
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
/* Inline function call optimization; Rte_Call_RP_RequestReset_RequestReset to RE_ExeMgr_ExecuteReset */
#define Rte_Call_RP_RequestReset_RequestReset( resetReason, resetGroup ) ( RE_ExeMgr_ExecuteReset(resetReason, resetGroup), ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
/* Inline function call optimization; Rte_Call_RP_ResetInfo_GetLastResetInfo to RE_ExeMgr_ResetInfo */
#define Rte_Call_RP_ResetInfo_GetLastResetInfo( resetReason, resetGroup ) ( RE_ExeMgr_ResetInfo(resetReason, resetGroup), ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
/* Inline read optimization; Rte_Call_RP_Startup_Source_GetLastStartupSource to direct read */
#define Rte_Call_RP_Startup_Source_GetLastStartupSource( startupSource )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
#define Rte_Read_PRP_CyclicNvBlock_CyclicNvBlock( data ) (Rte_Read_NvMUT_PRP_CyclicNvBlock_CyclicNvBlock(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
#define Rte_Read_PRP_ImmediateNvBlock_ImmediateNvBlock( data ) (Rte_Read_NvMUT_PRP_ImmediateNvBlock_ImmediateNvBlock(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
#define Rte_Read_PRP_ShutdownNvBlock_ShutDownNvBlock( data ) (Rte_Read_NvMUT_PRP_ShutdownNvBlock_ShutDownNvBlock(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
#define Rte_Write_PRP_CyclicNvBlock_CyclicNvBlock( data ) (Rte_Write_NvMUT_PRP_CyclicNvBlock_CyclicNvBlock(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
#define Rte_Write_PRP_ImmediateNvBlock_ImmediateNvBlock( data ) (Rte_Write_NvMUT_PRP_ImmediateNvBlock_ImmediateNvBlock(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvMUT_100ms)
#define Rte_Write_PRP_ShutdownNvBlock_ShutDownNvBlock( data ) (Rte_Write_NvMUT_PRP_ShutdownNvBlock_ShutDownNvBlock(data))
#endif

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define NvMUT_START_SEC_CODE
#include "NvMUT_MemMap.h"
FUNC(void, NvMUT_CODE) RE_CyclicBlock_JobFinished(VAR(uint8, AUTOMATIC) ServiceId,
                                                  VAR(NvM_RequestResultType, AUTOMATIC) JobResult);
FUNC(void, NvMUT_CODE) RE_ImmdiateBlock_JobFinished(VAR(uint8, AUTOMATIC) ServiceId,
                                                    VAR(NvM_RequestResultType, AUTOMATIC) JobResult);
FUNC(void, NvMUT_CODE) RE_NvMUT_100ms(void);
FUNC(void, NvMUT_CODE) RE_NvMUT_FastWrite_10ms(void);
FUNC(void, NvMUT_CODE) RE_ShutdownBlock_JobFinished(VAR(uint8, AUTOMATIC) ServiceId,
                                                    VAR(NvM_RequestResultType, AUTOMATIC) JobResult);
#define NvMUT_STOP_SEC_CODE
#include "NvMUT_MemMap.h"

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_NVMUT_H */

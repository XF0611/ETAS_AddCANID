/*                                                                                                                     
 ************************************************************************************************************************
 *                                                                                                                      
 * COPYRIGHT RESERVED, ETAS GmbH, 2021. All rights reserved.                                                    
 * The reproduction, distribution and utilization of this document as well as the communication of its contents to      
 * others without explicit authorization is prohibited. Offenders will be held liable for the payment of damages.       
 * All rights reserved in the event of the grant of a patent, utility model or design.                                  
 *                                                                                                                      
 ************************************************************************************************************************
 ************************************************************************************************
 * Component : Rtm_Cfg.h
 * Date      : May 20, 2021
 * Version   : 1.0
 * Description  : This module implements Rtm functions.
 *                Note: This file contains sample implementation only. It is not part of the
 *                      production deliverables. 
 ***********************************************************************************************
*/                                                                                                                     

#ifndef RTM_CFG_H
#define RTM_CFG_H

/*
  Module Rtm.
  It supports runtime measurement in series devices of tasks, runables and functions. It also monitores defined tasks.
  It uses the onchip debug features. If a user wants to work with a debugger at the same time as taking measurements,
  it is necessary to tell the debugger that the here configured breakpoint units are used otherwise.
  Up to 5 cores and 255 tasks are supported. Please refer to the manual for further details.
*/

/*
 ***********************************************************************************************************************
 * Includes
 ***********************************************************************************************************************
 */
 
#include "Std_Types.h"

/*
 ***********************************************************************************************************************
 * Preprocessor defines
 ***********************************************************************************************************************
 */

 /* Helper macro, do not change */
#define RTM_MON_LIST_ENTRY(x) { x, Os_Entry_##x }

/*! Common ************************************************************************************************************/

�IRtm_RtmGeneral_RtmVersionInfoApi == true-�
/* Enable version info api */
#define RTM_VERSIONINFOAPI STD_ON
�ELSE-�
/* Disable version info api */
#define RTM_VERSIONINFOAPI STD_OFF
�ENDIF-�

/* Definition of interface type, following labels will be accessible:
   Task monitoring labels:
   - Rtm_MonTask: Holds the acquired task monitoring values for the configured tasks (in the same order as
                              configured)
   - Rtm_MonSamples: Actual sample number for average and load update in task monitorings
   Function measure labels:
   - Rtm_Output: Output structure
   - Rtm_Input: Input structure
 * Debugger
   Values are only accessible through the debugger or ECU internal
 * CalibrationMeasurement
   All interface elements will be accessible through a calibration and measurement tool (e.g. INCA). */
#define RTM_INTERFACE_DEBUGGER 1
#define RTM_INTERFACE_CALIBMEAS 2
#define RTM_INTERFACE �
switch (Rtm.RtmGeneral.RtmInterface) {
  case 'Debugger'  : 'RTM_INTERFACE_DEBUGGER'
  case 'CalibrationMeasurement'  : 'RTM_INTERFACE_CALIBMEAS'
  default     : 'RTM_INTERFACE_DEBUGGER'
}-�


/* How often is the main function called in one second?
 * This depends on the task in which the runnable is integrated
 * E.g. 100ms task -> 10
         40ms task -> 25 */
#define RTM_MAINFCT_CALLS_PER_SECOND �Rtm.RtmGeneral.Rtm_MainFunctionPerSecond�

/* How fast is the free running counter clocked */
#define RTM_TICKS_PER_SECOND �
FOREACH this.mcu.mcuModuleConfiguration.mcuClockSettingConfig AS ClockSetting-�
�  FOREACH ClockSetting.mcuClockReferencePoint AS RefPoint-�
�    IF RefPoint.mcuClockReferencePoint__KEY.toString() == 'F_MCU_SYSTIMER'-�
�      RefPoint.mcuClockReferencePointFrequency.toInteger()-�
�    ENDIF-�
�  ENDFOREACH-�
�ENDFOREACH-�


/* Enable/disable callback to acquire idle time for systems with background tasks (Rtm_Cbk_GetIdleTime) */
#define RTM_IDLETIMECALLBACK STD_OFF


/*! Controlled measurement ********************************************************************************************/

/* Enable run-time controlled measurement (e.g. over Rtm) */
#define RTM_CTRL �IRtm_RtmControl_RtmControlEnabled == true�STD_ON�ELSE�STD_OFF�ENDIF�

/* Number of concurrent measurements per core.
   Increasing this value will speed up the batch measurement but does occupy RAM and breakpoint units or runtime
   in case of missing hardware support.
   The value must be between 1 and 4
*/
/* if RTM_CTRL is off this value has no impact */
#define RTM_CTRL_CONCURRENT_MEASURE �
switch (Rtm.RtmControl.RtmConcurrentMeasure) {
  case 'One'  : '1'
  case 'Two'  : '2'
  case 'Three': '3'
  case 'Four' : '4'
  default     : '1'
}-�


/*! Task/ISR and systemload monitoring ********************************************************************************/

/* How often should the monitoring build statistical values per minute (systemload and stats that are turned on below).
 * In a time frame the free running counter must not overflow (e.g. with 333MHz a timeframe is max. 12,8seconds -> 5) */
#define RTM_MON_SAMPLES_PER_MINUTE �Rtm.RtmMonitor.RtmMonitorSamplesPerMinute�

/* Should the monitoring build statistical values for ISRs */
#define RTM_MON_ISR_STAT �IRtm_RtmMonitor_RtmMonitorISR == true�STD_ON�ELSE�STD_OFF�ENDIF�
/* Should the monitoring build statistical values for tasks */
#define RTM_MON_TASK_STAT �IRtm_RtmMonitor_RtmMonitorTask == true�STD_ON�ELSE�STD_OFF�ENDIF�

/* Which ISRs should be monitored, the order will define the index in the monitoring array output
 * ISR monitoring can be deactivated with an undefined list */
#define RTM_MON_ISR_LIST �
FOREACH Rtm.RtmMonitor.RtmMonitorISRList AS ISRName
-� \
   RTM_MON_LIST_ENTRY(�ISRName�), �ENDFOREACH� { (ISRType)0, 0 }

/* Which tasks should be monitored, the order will define the index in the monitoring array */
#define RTM_MON_TASK_LIST �
FOREACH Rtm.RtmMonitor.RtmMonitorTaskList AS TaskName
-� \
   RTM_MON_LIST_ENTRY(�TaskName�), �ENDFOREACH� { (TaskType)0, 0 }


#endif /* RTM_CFG_H */

/*
 ***********************************************************************************************************************
 * End of header file
 ***********************************************************************************************************************
*/
